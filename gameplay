from IPython.display import clear_output
clear_output()

board = ['#'] + [' '] * 9
def draw_board (board):
    
    print('        |         |')
    print('1. ', board[1], '  |', '2. ',board[2], '  |','3. ',board[3])
    print('________|_________|__________')
    print('        |         |')
    print('4. ',board[4], '  |', '5. ',board[5], '  |','6. ',board[6])

    print('________|_________|__________')
    print('        |         |')
    print('7. ',board[7], '  |', '8. ' ,board[8], '  |' ,'9. ',board[9])
    print('        |         |')
    
    return board

update_board = draw_board (board)

def x_player_move (update_board):
    
    position = 'wrong'
    row_col_range = range(10)
    within_range = False
    valid_space = False
        
    while position.isdigit() == False or within_range == False or valid_space == False :
        
        position = input('Player 1: Select the box in which you would like to place an X: \n')

        if position.isdigit() == False:
            clear_output()
            print('Sorry, but you did not enter a valid number. Please try again.')

        if position.isdigit() == True:
            if int(position) in row_col_range:
                if update_board[int(position)] == ' ':
                    within_range = True
                    valid_space = True
                    update_board [int(position)] = 'X'
                else:
                    print('Sorry, that space has been taken. Please enter another value in the grid.')
                    valid_space = False
                
            else:
                print('Sorry, you are out of range. Please enter another value in the grid between 1 and 9')
                within_range = False

    return int(position) 

def o_player_move (update_board):
    
    position = 'wrong'
    row_col_range = range(10)
    within_range = False
    valid_space = False
        
    while position.isdigit() == False or within_range == False or valid_space == False:
        
        position = input('Player 2: Select the box in which you would like to place an O: \n')

        if position.isdigit() == False:
            clear_output()
            print('Sorry, but you did not enter a valid number. Please try again.')

        if position.isdigit() == True:
            if int(position) in row_col_range:
                if update_board[int(position)] == ' ':
                    within_range = True
                    valid_space = True
                    update_board [int(position)] = 'O'
                else:
                    print('Sorry, that space has been taken. Please enter another value in the grid.')
                    valid_space = False
                
            else:
                print('Sorry, you are out of range. Please enter another value in the grid between 1 and 9')
                within_range = False

    return int(position)
    
    def test_for_win (update_board, position):
    
    if position == 1 and ((update_board [1] == update_board [5] == update_board [9]) or (update_board [1] == update_board [2] == update_board [3]) or (update_board [1] == update_board [4] == update_board [7])):
        
        print ('Congrats! Player ' + update_board [position] + ' has won.')
            
    elif position == 2 and ((update_board [1] == update_board [2] == update_board [3]) or (update_board [2] == update_board [5] == update_board [8])):

        print ('Congrats! Player ' + update_board [position] + ' has won.')

    elif position == 3 and ((update_board [1] == update_board [2] == update_board [3]) or (update_board [3] == update_board [6] == update_board [9]) or (update_board [3] == update_board [5] == update_board [7])):

        print ('Congrats! Player ' + update_board [position] + ' has won.')

    elif position == 4 and ((update_board [4] == update_board [5] == update_board [6]) or (update_board [1] == update_board [4] == update_board [7])):

        print ('Congrats! Player ' + update_board [position] + ' has won.')

    elif position == 5 and ((update_board [4] == update_board [5] == update_board [6]) or (update_board [2] == update_board [5] == update_board [8]) or (update_board [1] == update_board [5] == update_board [9]) or (update_board [3] == update_board [5] == update_board [7])):

        print ('Congrats! Player ' + update_board [position] + ' has won.')

    elif position == 6 and ((update_board [4] == update_board [5] == update_board [6]) or (update_board [3] == update_board [6] == update_board [9])):

        print ('Congrats! Player ' + update_board [position] + ' has won.')

    elif position == 7 and ((update_board [1] == update_board [4] == update_board [7]) or (update_board [7] == update_board [8] == update_board [9]) or (update_board [3] == update_board [5] == update_board [7])):

        print ('Congrats! Player ' + update_board [position] + ' has won.')
            
    elif position == 8 and ((update_board [7] == update_board [8] == update_board [9]) or (update_board [2] == update_board [5] == update_board [8])):

        print ('Congrats! Player ' + update_board [position] + ' has won.') 
            
    elif position == 9 and ((update_board [7] == update_board [8] == update_board [9]) or (update_board [3] == update_board [6] == update_board [9]) or (update_board [1] == update_board [5] == update_board [9])):

        print ('Congrats! Player ' + update_board [position] + ' has won.')  
    
    else: 
        return False
    
    return True
    
    
   
def alternate_turns(update_board):
    i = 1
    has_won = False
    
    while i < len(update_board) and has_won == False:
        if i%2!=0:
            position = x_player_move (update_board)
            clear_output()
            draw_board(update_board)
            has_won = test_for_win (update_board, position)
        else:
            position = o_player_move (update_board)
            clear_output()
            draw_board(update_board)
            has_won = test_for_win (update_board, position)
            
        i+=1
    
    if has_won == False:
        print ('The game is a tie.')
        
        def replay():
    restart_prompt = input('Would you like to restart the game? Enter Y/N:\n')
    
    if restart_prompt == 'Y':
        clear_output()
        board = ['#'] + [' '] * 9
        update_board = draw_board (board)
        alternate_turns(update_board)
        return True
    elif restart_prompt == 'N':
        clear_output()
        print('Game over.')
        return False
    else:
        restart_prompt
    
    
